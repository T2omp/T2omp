*是重点，要背
9.8
Spring：
下面是spring三大特性
ioc容器：控制反转，将对象的控制权交由spring框架的容器ioc来管理
di依赖注入：对一个对象里面的属性进行注入，创建对象的时候通过框架来初始化
aop面向切面编程：对现有的代码，进行无侵入式的拓展，从切入点开始，做专属的逻辑定制
在resources里面创建配置文件
在配置文件写上bean配置：<bean class="com.Student" id="student"></bean>
实例化ioc容器： ApplicationContext context=new ClassPathXmlApplicationContext("配置文件名");
通过IOC容器获取对象：Student student = （Student）context.getBean("student");

9.9
ApplicationContext容器：
是一个IOC的容器，可以通过一个一个的bean来管理所有的对象
bean：向容器声明的配置，本质就是一个被spring容器管理起来的java类，配置在配置文件中 class里面是类的路径，id用于方便别的类去获取它
可以在bean标签里面定义scope属性，可以用于设置bean的作用范围，prototype原型模式（拿一次就创建一次不同的对象），singleton单例模式（整个容器只有一个对象）
*scope属性默认是单例模式（singleton）
init-method属性是指定一个类中的方法，对象初始化时会调用该方法
destroy-method属性是指定一个类中的方法，对象被销毁时会调用该方法
*lazy-init属性是只当我要用该对象的时候再去调用他，不会一配置就加载
*lazy-init是false的时候会在ApplicationContext context=new ClassPathXmlApplicationContext("spring-1.xml");的时候就就会把对象创建好
如果lazy-init是true的时候会在Student student=(Student)context.getBean("student");被调用的时候才会创建对象
*lazy-init作用：节省大量内存空间

9.10
bean的四个阶段
定义，初始化，使用，销毁
依赖注入：就是给类里面的属性去赋值
简单属性注入：一共有两种方式
	getter&setter注入：
	<property name="stuno" value="10001"></property>
   	<property name="age" value="18"></property>
	通过构造方法注入：记得在构造方法里面的参数都要进行声明
	<constructor-arg name="name" value="郭诗豪"></constructor-arg>
    	<constructor-arg name="remark" value="233"></constructor-arg>
对象的注入方式：也有两种方式
	用ref引用注入
	先<bean class="com.Teacher" id="teacher">
        	<property name="name" value="汪金龙"></property>
    	</bean>
	然后引用就可以了
	<property name="teacher" ref="teacher"></property>
	通过自动装配注入对象：1构造器装配，2byName装配，3byType装配
	构造器装配：创建对象的时候就会直接调用带有参数的构造方法
	<bean class="com.Teacher" id="teacher" autowire="constructor">
        	<property name="name" value="汪金龙"></property>
    	</bean>

9.11
通过自动装配注入对象：1构造器装配，2byName装配，3byType装配
	2byName装配：可以直接通过id来找所有配置在xml里的对象，前提是id等于属性名，名称不对会报错
	，会将一个类中需要的对象通过xml配置文件里找到对应id来注入
	<bean class="com.Student" id="student" autowire="byName">
	3byType装配
	与byName差不多，不过是通过变量的Class里的属性来装配的，如果要用bytype一定要确保该对象只在xml里出现过一次，因为对象默认的是单例模式
通过注解的方式配置：
	创建一个新的类写上@Configuration注释，这就相当于创建了一个xml
	在里面写上@Bean注解加上类：
	@Bean
    	public Teacher getTeacher(){
        	return new Teacher();
   	}
	上面相当于就<bean class=“***”
	也可以直接在要管理的类上面写上@Component，就说明该类被框架管理
	使用这个类的时候要用ApplicationContext context=new AnnotationConfigApplicationContext(SpringConfig.class);这种方式
	调用时：Student student=context.getBean(Student.class);



































































































